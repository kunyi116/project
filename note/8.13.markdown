接8.12ES6语法
    箭头函数
        ()=>{

        }
        等价于
        function(){

        }
        参数
            如果箭头函数只有一个参数，那么它可以写为
                (参数)=>{
                    //代码
                }
                只有一个参数时，可以将小括号去掉
                参数=>{
                    //代码
                }
                有多个参数时，那么我们必须添加小括号
        参数默认值
            如果函数没有传入实参 则我们默认执行默认参数值；如果函数传入了实参，则将默认值替换掉 使用实参数据
                const 函数名=(形参1，形参2=默认值)=>{
                    //代码
                }
                函数名(实参1，实参2)
        返回值
            如果箭头函数只有返回值 
                ()=>{
                    return 返回值
                }
            可以简写为
                ()=>返回值
            如果箭头函数只有返回值并且返回的是一个对象
                ()=>{
                    return {属性名：属性值}
                }
            可以简写为
                ()=>({属性名：属性值})
    数组方法
        forEach
            只要for循环遍历数组能实现的 都可以使用forEach
        map
            根据原数组生成一个与之长度相同的新数组 会得到一个返回值 这个返回值就是新数组 map函数返回值是对应生成的新数组中对应位置的值 与forEach用法相同
                格式
                    数组.map((item,index,array)=>{

            })
        filter
            过滤
                将数组中符合条件的元素留下并返回
                    格式
                        数组.filter((item,index,array)=>{

                        })
        indexOf(值)
            判断对应的值在数组中的下标索引 存在则返回对应下标索引 如果不存在则返回-1
        includes(值)
            只要值存在数组中 返回true 否则返回false
        find
            只会查找第一个遇到的结果 在遍历数组时，当find参数返回值为true时则停止遍历 并将当前遍历的value值进行返回输出 没有找到则返回undefind
            数组.find((item,index,array)=>{

                        })
        some
            表示数组中是否有一个值符合对应条件 如果符合条件返回true 否则返回false
            数组.some((item,index,array)=>{
                            return 条件
                        })
        every
            表示数组中是否全部的值都符合对应的条件 如果符合条件返回true 否则返回false
            数组.every((item,index,array)=>{
                            return 条件
                        })
解构 赋值
    对对象或者是数组等数据进行结构的分解 并且赋值给对应的变量 如果解构赋值的2目标是一个对象 那么对象中的属性名已经被其他的变量名占用 会报错 这个时候 需要给解构赋值中的sex添加一个别名 别名要写英文
        解构赋值针对形参
            如果函数调用的时候 传入实参是一个对象或者数组 那么我们可以对传入的实参进行解构赋值

        1.属性名和属性值的变量名相同的时候 简写为一个即可
            const 变量名=值
            const obj={
                变量名
            }
        2.对象中方法，可以直接写为
            const obj={
                方法名 (){
                    //执行代码
                }
            }
            obj.方法名 () 调用



