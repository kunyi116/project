JSON.parse()
    将数据转化为json对象 (取操作)
JSON.stringify()
    将数据转化为json字符串 (存操作)

    localStorage
        本地存储
        本地存储中，不管存储什么数据类型，得到的结果都是字符串
        本地存储中，只要不手动删除，数据会一直存在
        用来作为本地存储来使用 
        解决了cookie存储空间不足时，localStorage(5M甚至更多)进行存储 不同浏览器存储大小有区别 不能跨浏览器
        读写操作
            写数据
                localStorage.setItem('属性名'，'属性值')   使用最多
                或者
                localStorage.属性名=属性值
            读数据
                localStorage.getItem('属性名')
                或者
                localStorage['属性名']
            删除数据
                localStorage.removeItem('属性名')
            清空数据
                localStorage.clear()
    sessionStorage (会话存储)
        临时会话存储
            当前浏览器窗口打开(会话开始) 存储数据
            当前浏览器窗口关闭(会话结束)    自动清除数据

cookie 
为了解决如何记住用户信息来发明的 下次用户访问时 cookie会记住用户的信息
    设置cookie
        document.cookies="key=value"
        例如 document.cookie="userName=张三"
        设置的时候 每条后边可以添加cookie过期时间
            expires 过期时间
                默认会话级别时效性
                expires=时间对象
    读取cookie
        document.cookie
    删除cookie
        将cookie的expires日期设置到当前日期之前 就可以删除cookie
    修改
        直接设置同名cookie  就是修改(覆盖)

正则表达式
    正则表达式是用于匹配字符串中字符组合的模式，校验数据格式是否符合要求 通常用于用户输入合法性的校验
    创建正则
        两种方式
            字面量
                使用一个正则表达式字面量 包含在斜杠之间组成 如下：
                var reg=/abc/;  // 这表示在字符中匹配'abc'这一段字符
            RegExp对象创建正则
                var reg=RegExp('abc)
    修饰符
        创建正则时 可以添加修饰符让正则匹配整个字符串或者忽略大小写 修饰符可以单独使用也可以同时使用

        g
            /abc/g  //全局匹配 abc字符串
        i
            /abc/i //忽略大小写
        
    使用正则表达式
        exec()
            在一个指定的字符串中执行一个搜索匹配 匹配成功返回一个结果的数组
            失败返回null
                结果中包含的内容
                    groups 一个捕获数组或者undefined(如果没有定义捕获数组)
                    index 匹配结果开始的位置
                    input 匹配的字符串
                        格式：
                        regObj.exec(str)
                        regObj 创建出来的正则对象
                        str 要匹配正则表达式的字符串
        test()
            执行一个检索 用来查看正则表达式与指定字符串是否匹配 成功返回true 失败返回false
                regObj.test(str)

        match()
            检索返回一个字符串匹配正则表达式的结果
                str.match(regObj)

        search()
            执行正则表达式和String对象之间的一个搜索匹配
            匹配成功 返回正则表达式字符串中首次匹配的索引 该方法中修饰符 g 是无效的
                匹配失败 返回-1
                    语法：
                        str.search(regObj)

        replace()
            返回一个由替换值替换部分或者所有模式匹配项后的新的字符串
                    语法：
                        str.replace(regExp | substr , newSubStr | function)

                        regExp
                            一个正则对象或者字面量  该正则所匹配的内容会被第二个参数返回值所替换掉
                        
                        subStr
                            一个被newSubStr替换的字符串  只是一个字符串 不能把它看做正则表达式

                        newSubStr
                            用于替换第一个参数在原字符串匹配部分的字符
                        
                        function
                            一个用来创建新字符串的函数        




元字符
    元字符是拥有特殊含义的字符 可以单个使用 可以组合使用
    \w 查找单词字符
    \W 查找非单词字符
    \d 查找数字
    \D 查找非数字字符
    \s 查找空白字符
    \S 查找非空白字符
    \b 匹配单词边界
    \B 匹配非单词边界

组合
    查找某个范围内的字符
    [abc]  查找括号中间的任意字符
    [^abc]  查找任何不在括号中间字符
    [0-9]      查找0-9之间数字
    [a-z]      查找小写a到小写z之间字母
    [A-Z]      查找大写A到大写Z之间字母
    [A-z]      查找任何从大写A到小写z之间字母
    [adgk]     查找集合内的任何字符
    (red|blue|green)  查找任何指定的选项

量词
    n+          匹配任何包含至少一个n的字符串
    n*          匹配包含零个或者多个n的字符串
    n?          匹配包含零个或者一个n的字符串
    n{x}        匹配包含x个n的字符串
    n{x,y}      匹配包含x到y个n的字符串
    n{x,}       匹配至少x个n的字符串
    ^n          匹配以n开头的字符串
    ?=n         匹配任何其后紧接指定字符串n的字符串
    ?!n         匹配其后没有紧接着指定字符串n的字符串
    n$          匹配任何以n结尾的字符串